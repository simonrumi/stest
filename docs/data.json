{
    "project": {},
    "files": {
        "scripts\\sTest.js": {
            "name": "scripts\\sTest.js",
            "modules": {
                "STest": 1
            },
            "classes": {
                "Testable": 1,
                "TestItem": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "STest": {
            "name": "STest",
            "submodules": {},
            "classes": {
                "Testable": 1,
                "TestItem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "scripts\\sTest.js",
            "line": 140,
            "example": [
                "\nTo use do something like this:\n\n\tvar myTestableObj = new Testable();\n\n\tmyTestableObj.addFunction('addNums', function(num1, num2) {\n\t\t// write your function as usual here\n\t\treturn num1 + num2;\n\t});\n\nuse the function with tests in-line like this:\n\n\tvar fourPlusFive = myTestableObj.addNums(4,5)\n\t\t.describe('Testing addNums(4,5)')\n\t\t.expect('something')\n\t\t.expect('toBe', 9)\n\t\t.endTests();\n\n...note that you always have to end with endTests(), even if you ran no tests, in order to return the value output by the function.\n\nIf you want to test just a raw value (rather than the output of a function) you can do this:\n\n\tvar myTestableObj = new Testable();\n\tmyTestableObject.testRawValue(myValue)\n\t\t.describe('testing myValue')\n\t\t.expect('something')\n\t\t.expect('toBe', 'The answser is 42')\n\t\t.endTests();\n\nFor a listing of all the available tests, look at TestItem -> Attributes (the available tests aren't really attributes, but 'Attributes' was a place to list them)"
            ],
            "is_constructor": 1
        }
    },
    "classes": {
        "Testable": {
            "name": "Testable",
            "shortname": "Testable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "STest",
            "namespace": "",
            "file": "scripts\\sTest.js",
            "line": 3,
            "example": [
                "\nTo use do something like this:\n\n\tvar myTestableObj = new Testable();\n\n\tmyTestableObj.addFunction('addNums', function(num1, num2) {\n\t\t// write your function as usual here\n\t\treturn num1 + num2;\n\t});\n\nuse the function with tests in-line like this:\n\n\tvar fourPlusFive = myTestableObj.addNums(4,5)\n\t\t.describe('Testing addNums(4,5)')\n\t\t.expect('something')\n\t\t.expect('toBe', 9)\n\t\t.endTests();\n\n...note that you always have to end with endTests(), even if you ran no tests, in order to return the value output by the function.\n\nIf you want to test just a raw value (rather than the output of a function) you can do this:\n\n\tvar myTestableObj = new Testable();\n\tmyTestableObject.testRawValue(myValue)\n\t\t.describe('testing myValue')\n\t\t.expect('something')\n\t\t.expect('toBe', 'The answser is 42')\n\t\t.endTests();\n\nFor a listing of all the available tests, look at TestItem -> Attributes (the available tests aren't really attributes, but 'Attributes' was a place to list them)"
            ]
        },
        "TestItem": {
            "name": "TestItem",
            "shortname": "TestItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "STest",
            "namespace": "",
            "file": "scripts\\sTest.js",
            "line": 140,
            "description": "An object that knows the name of a function and a result, generated by that function, to be tested. It also contains the logic for a series of tests.\nIt is expected to be given a result from a Testable object and to run one or more of its tests on it. Reporting is printed to the console;\nThe last function called needs to be endTests() which will pass through the result, even if the test(s) failed.\nIf a test is called within a looping function, the number of tests run can be reduced by adding an iteration limit.\nThis will stop the test results printing after that limit, but won't stop the function executing.\nThe iteration limit is added as the last parameter to the test function.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "resultToTest",
                    "description": "the value that has been generated by some function which is being tested against an expected value",
                    "type": "Any"
                },
                {
                    "name": "testingOn",
                    "description": "true if tests are to be run, false if not",
                    "type": "Boolean"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "scripts\\sTest.js",
            "line": 41,
            "description": "Each Testable object keeps a collection of TestItems, where the key is the name of the function and the value is the TestItem. This is only for internal use by Testable",
            "itemtype": "property",
            "name": "testItems",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Testable",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 49,
            "description": "Set to false to turn testing off for all functions in the Testable object.",
            "itemtype": "property",
            "name": "testingOn",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "Testable",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 58,
            "description": "Used by testRawValue below, this value is a TestItem for testing raw values (rather than for testing functions)",
            "itemtype": "property",
            "name": "__testableSelf",
            "type": "TestItem",
            "access": "private",
            "tagname": "",
            "class": "Testable",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 67,
            "description": "Wraps a function so that it runs and can have its result tested",
            "itemtype": "method",
            "name": "addFunction",
            "return": {
                "description": "A TestItem that contains the function",
                "type": "TestItem"
            },
            "class": "Testable",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 87,
            "description": "This is used by addFunction to register TestItems in the testItems collection\nand associate the result being tested with it. (If the TestItem has previously been added to testItems, it is not added twice)",
            "itemtype": "method",
            "name": "registerTestItem",
            "params": [
                {
                    "name": "functionName",
                    "description": "The name of the function",
                    "type": "String"
                },
                {
                    "name": "resultToTest",
                    "description": "The value returned by the function that is to be tested",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The TestItem, now registered and with the resultToTest associated with it",
                "type": "TestItem"
            },
            "access": "private",
            "tagname": "",
            "class": "Testable",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 106,
            "description": "As well as testing values returned by functions as they are executed, we also want the ability to run tests on values that we have gotten from a means other than by running Testable functions.\nHence testRawValue allows you to run all the TestItem tests on just a raw value that you hand it",
            "itemtype": "method",
            "name": "testRawValue",
            "params": [
                {
                    "name": "rawValue",
                    "description": "A value or object to test",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "returns the rawValue you gave it.",
                "type": "Any"
            },
            "class": "Testable",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 121,
            "description": "Used for turning tests on or off",
            "itemtype": "method",
            "name": "setTestingOn",
            "params": [
                {
                    "name": "testingOn",
                    "description": "Set to true to turn testing on or false to turn testing off",
                    "type": "Boolean"
                },
                {
                    "name": "functionName",
                    "description": "[optional] If given this turns testing on/off for just the given function, otherwise all functions will have their testing turned on/off TODO currently not working",
                    "type": "String"
                }
            ],
            "class": "Testable",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 162,
            "description": "Print out a description of the test(s)",
            "itemtype": "method",
            "name": "describe",
            "return": {
                "description": "This TestItem (to be passed to other tests)"
            },
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 175,
            "description": "An object that contains functions which are the individual tests that are to be run, in turn, by the expect() function\nAny new tests needed should be coded in here.\nNote that the name 'iterationLimit' is a special name and should not be varied\n\nSee the Attributes section for a listing of all the tests",
            "itemtype": "property",
            "name": "tests",
            "type": "Object",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 187,
            "description": "Logs a PASS if the result being tested returns anything that is not null or an empty string, Logs a FAIL if not",
            "example": [
                "\n\tvar fourPlusFive = myTestableObj.addNums(4,5)\n\t\t.describe('Testing addNums(4,5)')\n\t\t.expect('something')\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "something",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 209,
            "description": "Logs a PASS if the result being tested returns true, Logs a FAIL if not",
            "example": [
                "\n\tvar isCorrect = myTestableObj.checkForCorrectness(myValue)\n\t\t.describe('Testing checkForCorrectness()')\n\t\t.expect('true')\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "true",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 231,
            "description": "Logs a PASS  if the result being tested returns false, Logs a FAIL if not",
            "example": [
                "\n\tvar isNotCorrect = myTestableObj.checkForIncorrectness(myValue)\n\t\t.describe('Testing checkForIncorrectness()')\n\t\t.expect('false')\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "false",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 253,
            "description": "Logs a PASS  if the result being tested equals the expected value (the 2nd parameter), Logs a FAIL if not",
            "example": [
                "\n\tvar mySum = myTestableObj.addNums(4,5)\n\t\t.describe('Testing addNums(4,5)')\n\t\t.expect('toBe', 9)\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "toBe",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 276,
            "description": "Logs a PASS  if the result being tested is an object of the expected type (the 2nd parameter), Logs a FAIL if not",
            "example": [
                "\n\tvar myCar = myTestableObj.getCarObj()\n\t\t.describe('Testing getCarObj()')\n\t\t.expect('type', Car)\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "type",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 298,
            "description": "Logs a PASS if the result being tested is an HTMLElement.\nIf a 2nd parameter is given specifying the particular element then a PASS will be given only if the result is exactly that type.\nLogs a FAIL otherwise",
            "example": [
                "\n\tvar myDiv = myTestableObj.getContainerDiv('#container')\n\t\t.describe('Attempting to get the div with the id #container')\n\t\t.expect('htmlElement', HTMLDivElement)\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "htmlElement",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 325,
            "description": "Logs a PASS if the String being tested contains the String given as the 2nd parameter.\nLogs a FAIL otherwise",
            "example": [
                "\n\tvar fullName = myTestableObj.getFullName()\n\t\t.describe(\"Getting Bob's full name\")\n\t\t.expect('contains', 'Bob')\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "contains",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 349,
            "description": "Logs a PASS if the String being tested contains the String given as the 2nd parameter.\nLogs a FAIL otherwise",
            "example": [
                "\n\tvar fullName = myTestableObj.getFullName()\n\t\t.describe('Getting the full name of someone other than Mary')\n\t\t.expect('doesNotContain', 'Mary')\n\t\t.endTests();"
            ],
            "itemtype": "attribute",
            "name": "doesNotContain",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 373,
            "description": "The function that runs the test of the given name and prints the result to the console",
            "itemtype": "method",
            "name": "expect",
            "params": [
                {
                    "name": "testName",
                    "description": "The name of the test"
                },
                {
                    "name": "expectedValue",
                    "description": "[optional - needed for some tests but not others] The expected value to test the actual value against"
                },
                {
                    "name": "iterationLimit",
                    "description": "[optional] The maximum number of times to run this particular test. Once over the maximum the test won't be run. If not given, then the maximum is infinite."
                }
            ],
            "return": {
                "description": "This TestItem (to be passed to other tests)"
            },
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 400,
            "description": "Finds the current iteration limit for the current test",
            "itemtype": "method",
            "name": "getIterationLimit",
            "return": {
                "description": "The iteration limit (an integer) - can be undefined if no iteration limit was given"
            },
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 412,
            "description": "Simply prints the actual value (the value being tested) to the console",
            "itemtype": "method",
            "name": "printActual",
            "return": {
                "description": "This TestItem (to be passed to other tests)"
            },
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 425,
            "description": "Prints the given message to the console if testing is turned On",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 438,
            "description": "The beginning of the line printed when a test passes",
            "itemtype": "property",
            "name": "passString",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 447,
            "description": "The beginning of the line printed when a testfails",
            "itemtype": "property",
            "name": "failString",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 456,
            "description": "The beginning of the line printed when there is an error attempting to run a test",
            "itemtype": "property",
            "name": "errorString",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 465,
            "description": "This method should be called at the end of a chain of tests to return the value that was being tested, just as if the function was called without any tests attached",
            "itemtype": "method",
            "name": "endTests",
            "return": {
                "description": "the original value, returned by the function, that has been tested",
                "type": "Any"
            },
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 475,
            "description": "Checks to see whether the current number of iterations is less than the iterationLimit\nreturn true if it is, false if we have reached the iterationLimit\nor if no iterationLimit is given, return true, as any number of iterations is OK",
            "itemtype": "method",
            "name": "checkIterations",
            "params": [
                {
                    "name": "testName",
                    "description": "The test being run",
                    "type": "String"
                },
                {
                    "name": "iterationLimit",
                    "description": "The max number of iterations allowed for running the current test",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "false if the iteration limit has been reached, true if not",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "TestItem",
            "module": "STest"
        },
        {
            "file": "scripts\\sTest.js",
            "line": 502,
            "description": "Resets the iteration number of the given test to 0. Or if there is no testName given, reset all iteration numbers for all tests",
            "itemtype": "method",
            "name": "resetIterations",
            "params": [
                {
                    "name": "optional",
                    "description": "testName The test for which to reset the iterations",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "TestItem",
            "module": "STest"
        }
    ],
    "warnings": []
}